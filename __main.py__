import pulumi
import pulumi_aws as aws

# Get configuration
config = pulumi.Config()
ssh_public_key = config.require("sshPublicKey")
my_ip = config.get("myIp") or "0.0.0.0/0"
my_ip = my_ip.strip()

# ----------------------------
# Task 1: VPC, Subnets, NAT, Route Tables
# ----------------------------
vpc = aws.ec2.Vpc("exam-vpc",
    cidr_block="10.0.0.0/16",
    enable_dns_hostnames=True,
    enable_dns_support=True,
    tags={"Name": "exam-vpc"}
)

igw = aws.ec2.InternetGateway("exam-igw",
    vpc_id=vpc.id,
    tags={"Name": "exam-igw"}
)

eip = aws.ec2.Eip("nat-eip",
    domain="vpc",
    tags={"Name": "exam-nat-eip"}
)

public_subnet = aws.ec2.Subnet("public-subnet",
    vpc_id=vpc.id,
    cidr_block="10.0.1.0/24",
    availability_zone="ap-southeast-1a",
    map_public_ip_on_launch=True,
    tags={"Name": "public-subnet"}
)

public_route_table = aws.ec2.RouteTable("public-rt",
    vpc_id=vpc.id,
    routes=[aws.ec2.RouteTableRouteArgs(
        cidr_block="0.0.0.0/0",
        gateway_id=igw.id
    )],
    tags={"Name": "public-rt"}
)

public_route_table_assoc = aws.ec2.RouteTableAssociation("public-rt-assoc",
    subnet_id=public_subnet.id,
    route_table_id=public_route_table.id
)

nat_gateway = aws.ec2.NatGateway("nat-gw",
    allocation_id=eip.allocation_id,
    subnet_id=public_subnet.id,
    tags={"Name": "exam-nat-gw"},
    opts=pulumi.ResourceOptions(depends_on=[igw])
)

private_subnet = aws.ec2.Subnet("private-subnet",
    vpc_id=vpc.id,
    cidr_block="10.0.2.0/24",
    availability_zone="ap-southeast-1a",
    tags={"Name": "private-subnet"}
)

private_route_table = aws.ec2.RouteTable("private-rt",
    vpc_id=vpc.id,
    routes=[aws.ec2.RouteTableRouteArgs(
        cidr_block="0.0.0.0/0",
        nat_gateway_id=nat_gateway.id
    )],
    tags={"Name": "private-rt"}
)

private_route_table_assoc = aws.ec2.RouteTableAssociation("private-rt-assoc",
    subnet_id=private_subnet.id,
    route_table_id=private_route_table.id
)

# ----------------------------
# Task 2: Bastion Host
# ----------------------------
bastion_sg = aws.ec2.SecurityGroup("bastion-sg",
    description="Allow SSH access to bastion",
    vpc_id=vpc.id,
    ingress=[aws.ec2.SecurityGroupIngressArgs(
        description="SSH from my IP",
        from_port=22, to_port=22,
        protocol="tcp",
        cidr_blocks=[my_ip]
    )],
    egress=[aws.ec2.SecurityGroupEgressArgs(
        from_port=0, to_port=0,
        protocol="-1",
        cidr_blocks=["0.0.0.0/0"]
    )],
    tags={"Name": "bastion-sg"}
)

ssh_key = aws.ec2.KeyPair("bastion-key",
    key_name="exam-bastion-key",
    public_key=ssh_public_key
)

bastion_user_data = f"""#!/bin/bash
useradd -m -s /bin/bash ops
mkdir -p /home/ops/.ssh
echo "{ssh_public_key}" >> /home/ops/.ssh/authorized_keys
chown -R ops:ops /home/ops/.ssh
chmod 700 /home/ops/.ssh
chmod 600 /home/ops/.ssh/authorized_keys
echo "ops ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
systemctl restart sshd
"""

bastion = aws.ec2.Instance("bastion-host",
    ami="ami-0779c82fbb81e731c",  # Use your Amazon Linux AMI for bastion
    instance_type="t2.micro",
    subnet_id=public_subnet.id,
    vpc_security_group_ids=[bastion_sg.id],
    associate_public_ip_address=True,
    user_data=bastion_user_data,
    key_name=ssh_key.key_name,
    tags={"Name": "bastion-host"}
)

# ----------------------------
# Task 3 & 4: Private Instance (Ubuntu 24.04) with MySQL
# ----------------------------
app_sg = aws.ec2.SecurityGroup("app-sg",
    description="Allow SSH from bastion & MySQL",
    vpc_id=vpc.id,
    ingress=[
        aws.ec2.SecurityGroupIngressArgs(
            description="SSH from bastion",
            from_port=22, to_port=22, protocol="tcp",
            security_groups=[bastion_sg.id]
        ),
        aws.ec2.SecurityGroupIngressArgs(
            description="MySQL from bastion",
            from_port=3306, to_port=3306, protocol="tcp",
            security_groups=[bastion_sg.id]
        )
    ],
    egress=[aws.ec2.SecurityGroupEgressArgs(
        from_port=0, to_port=0, protocol="-1", cidr_blocks=["0.0.0.0/0"]
    )],
    tags={"Name": "app-sg"}
)

mysql_user_data = """#!/bin/bash
# Update system and install MySQL
apt update -y
apt install -y mysql-server

# Enable & start service
systemctl enable mysql
systemctl start mysql

# Generate passwords
MYSQL_ROOT_PASSWORD=$(openssl rand -base64 12)
APPUSER_PASSWORD=$(openssl rand -base64 12)

echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" > /home/ubuntu/mysql_credentials
echo "APPUSER_PASSWORD=${APPUSER_PASSWORD}" >> /home/ubuntu/mysql_credentials
chmod 600 /home/ubuntu/mysql_credentials

# Configure MySQL
sudo mysql <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ROOT_PASSWORD}';
CREATE DATABASE appdb;
CREATE USER 'appuser'@'%' IDENTIFIED BY '${APPUSER_PASSWORD}';
GRANT ALL PRIVILEGES ON appdb.* TO 'appuser'@'%';
FLUSH PRIVILEGES;
EOF

# Test script
cat > /home/ubuntu/test_mysql.sh << 'EOT'
#!/bin/bash
source /home/ubuntu/mysql_credentials
mysql -u appuser -p${APPUSER_PASSWORD} -e "SHOW DATABASES;"
EOT
chmod +x /home/ubuntu/test_mysql.sh
"""

private_instance = aws.ec2.Instance("private-instance",
    ami="ami-0933f1385008d33c4",  # Ubuntu 24.04 AMI
    instance_type="t2.micro",
    subnet_id=private_subnet.id,
    vpc_security_group_ids=[app_sg.id],
    user_data=mysql_user_data,
    key_name=ssh_key.key_name,
    tags={"Name": "private-instance"}
)

# ----------------------------
# Export outputs
# ----------------------------
pulumi.export("bastion_public_ip", bastion.public_ip)
pulumi.export("private_instance_private_ip", private_instance.private_ip)
pulumi.export("ssh_key_name", ssh_key.key_name)
